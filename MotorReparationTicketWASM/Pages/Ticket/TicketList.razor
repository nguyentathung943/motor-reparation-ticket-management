@page "/tickets"
@inject NavigationManager _navigationManager
@inject ITicketHttpService TicketHttpService
@inject IToastService toastService
@attribute [Authorize]

<h3> TICKET LIST </h3>

@if (Tickets.Any())
{
	<table class="table table-primary">
		<thead>
		<tr>
			<th scope="col">Id</th>
			<th scope="col">Title</th>
			<th scope="col">Description</th>
			<th scope="col">Status</th>
			<th scope="col">Owner</th>
			<th scope="col">Methods</th>
		</tr>
		</thead>
		<tbody>
		@foreach(var Ticket in Tickets)
		{
			<tr>
				<th scope="row">@Ticket.Id</th>
				<td>@Ticket.Title</td>
				<td>@Ticket.Description</td>
				<td>@Ticket.TicketStatus</td>
				<td>@Ticket.CreatedByUser</td>
				<td>
					<button type="button" class="btn btn-primary" @onclick="() => onEditTicketButtonClicked(Ticket.Id.Value)">Edit</button>
					<button type="button" class="btn btn-danger" @onclick="() => onDeleteTicketButtonClicked(Ticket.Id.Value)">Delete</button>
					<button type="button" class="btn btn-info" @onclick="() => onViewItemsButtonClicked(Ticket.Id.Value)">View Work Items</button>
				</td>
			</tr>
		}
		</tbody>
	</table>
}
else
{
	<div class="text-info">
		No Tickets Available
	</div>
}

<button type="button" class="btn btn-primary" @onclick="() => onAddTicketButtonClicked()">Add Ticket</button>

@code {
	private List<TicketDTO> Tickets { get; set; } = new List<TicketDTO> { };

	protected async override Task OnInitializedAsync()
	{
	    try
	    {
	        Tickets = await TicketHttpService.GetAllTickets();
	    }
	    catch (Exception ex)
	    {
	        toastService.ShowError(ex.Message);
	    } 
	}

	private async Task onAddTicketButtonClicked()
	{
		_navigationManager.NavigateTo($"/tickets/create");
	}

	private async Task onDeleteTicketButtonClicked(int ticketId)
	{
		try {
			await TicketHttpService.DeleteTicket(ticketId);
			Tickets = await TicketHttpService.GetAllTickets();
			toastService.ShowInfo("Ticket deleted successfully");
        }
        catch (Exception ex) {
            toastService.ShowError("Fail to Delete Ticket");
            toastService.ShowError(ex.Message);
        }
	}

	private async Task onEditTicketButtonClicked(int ticketId)
	{
		_navigationManager.NavigateTo($"/tickets/edit/{ticketId}");
	}

	private async Task onViewItemsButtonClicked(int ticketId)
	{
		_navigationManager.NavigateTo($"/tickets/{ticketId}/items");
	}
}
