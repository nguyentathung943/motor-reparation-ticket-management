@page "/tickets/create"
@page "/tickets/edit/{Id:int}"
@inject ITicketHttpService TicketHttpService
@inject IToastService toastService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h3> @Title A TICKET </h3>

<div class="row mt-2 mb-5">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="TicketModel" OnValidSubmit="HandleOnSubmitForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary/>

                    <div class="form-group">
                        <label>Title</label>
                        <InputText @bind-Value="TicketModel.Title" class="form-control"></InputText>
                        <ValidationMessage For="() => TicketModel.Title"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <InputText @bind-Value="TicketModel.Description" class="form-control"></InputText>
                        <ValidationMessage For="() => TicketModel.Description"></ValidationMessage>
                    </div>

                    <div class="form-group">
                        <label>Ticket Status</label>
                        <select @bind="TicketModel.TicketStatus" class="form-control">
                            <option value="@TicketStatus.Todo">To do</option>
                            <option value="@TicketStatus.InProgress">In Progress</option>
                            <option value="@TicketStatus.WorkDone">Work Done</option>
                        </select>
                    </div>

                    <div class="form-group mt-4">
                        <button class="btn btn-primary">@Title Ticket</button>
                        <NavLink href="/tickets" class="btn btn-secondary">Back to Ticket List</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int? Id { get; set; }
    private TicketCreateUpdateDTO TicketModel = new TicketCreateUpdateDTO()
    {
            TicketStatus = TicketStatus.Todo
    };

    private string Title { get; set;}

    private bool isInCreateMode {get; set;}

    protected override void OnInitialized()
    {
        isInCreateMode = Id == null ? true : false;
        Title = isInCreateMode ? "Create" : "Update";
    }

    protected override async Task OnInitializedAsync(){
        try {
            if (!isInCreateMode) {
                TicketDTO ticketDTO = await TicketHttpService.GetTicketById(Id.Value);
                TicketModel = new TicketCreateUpdateDTO()
                {
                   TicketStatus = ticketDTO.TicketStatus,
                   Description = ticketDTO.Description,
                   Title = ticketDTO.Title
                };
            }
        }
        catch (Exception ex) {
            toastService.ShowError("No Ticket Was Found");
            toastService.ShowError(ex.Message);
            NavigationManager.NavigateTo("/tickets");
        }
    }

    private async Task HandleOnSubmitForm() {
        try {
            var isActionCompleted = isInCreateMode
                ? await TicketHttpService.CreateTicket(TicketModel)
                : await TicketHttpService.UpdateTicket(Id.Value, TicketModel);

            if (isActionCompleted)
            {
                toastService.ShowInfo($"Ticket {Title} Successfully!");
                NavigationManager.NavigateTo("/tickets");
            }
        }
        catch (Exception ex) {
            toastService.ShowError($"Fail to {Title} Ticket");
            toastService.ShowError(ex.Message);
        }
    }
}
